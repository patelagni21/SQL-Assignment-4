-- #2

-- Creating the TripAdvisor table

CREATE TABLE TripAdvisor(
	RESTAURANT VARCHAR(40) NOT NULL, 
	RANK INT NOT NULL,
	SCORE FLOAT NOT NULL,
	USER_NAME VARCHAR(40) NOT NULL, 
	REVIEW_STARS INT NOT NULL,
	REVIEW_DATE DATE NOT NULL,
	USER_REVIEWS INT NOT NULL,
	USER_RESTAURANT_REVIEWS INT NOT NULL,
	USER_HELPFUL_VOTES INT NOT NULL,
	ID INT NOT NULL AUTO_INCREMENT,
	PRIMARY KEY (ID)
);



-- #3

-- verify functional dependencies

-- RESTAURANT -> RANK
-- USER_NAME, REVIEW_DATE -> {USER_REVIEWS, USER_RESTAURANT_REVIEWS, USER_HELPFUL_VOTES}
-- RESTAURANT, USER_NAME, REVIEW_DATE -> REVIEW_STARS
SELECT CASE WHEN NOT EXISTS (
    SELECT A.RESTAURANT AS RestaurantName1, B.RESTAURANT AS RestaurantName2
	FROM TripAdvisor A, TripAdvisor B
	WHERE A.RANK <> B.RANK and A.RESTAURANT = B.RESTAURANT
)
THEN True
ELSE False END

SELECT CASE WHEN NOT EXISTS (
    SELECT A.USER_NAME AS UserName1, B.USER_NAME AS UserName2
	FROM TripAdvisor A, TripAdvisor B
	WHERE A.USER_NAME = B.USER_NAME and A.REVIEW_DATE = B.REVIEW_DATE and A.USER_REVIEWS <> B.USER_REVIEWS and A.USER_RESTAURANT_REVIEWS <> B.USER_RESTAURANT_REVIEWS and A.USER_HELPFUL_VOTES <> B.USER_HELPFUL_VOTES
)
THEN True
ELSE False END

SELECT CASE WHEN NOT EXISTS (
    SELECT A.RESTAURANT AS Restaurant1, B.RESTAURANT AS Restaurant2, A.USER_NAME AS UserName1, B.USER_NAME AS UserName2
	FROM TripAdvisor A, TripAdvisor B
	WHERE A.USER_NAME = B.USER_NAME and A.RESTAURANT = B.RESTAURANT and A.REVIEW_DATE = B.REVIEW_DATE and A.REVIEW_STARS <> B.REVIEW_STARS
)
THEN True
ELSE False END



-- #4

-- All the functional dependencies holds and hence TripAdvisor is not in the BCNF

-- Creating the tables User, Restaurant and Review

CREATE TABLE User(
	USER_NAME VARCHAR(40) NOT NULL,
	PRIMARY KEY (USER_NAME)
);


CREATE TABLE Restaurant(
	RESTAURANT VARCHAR(40) NOT NULL, 
	RANK INT NOT NULL,
	SCORE FLOAT NOT NULL,
	PRIMARY KEY (RESTAURANT)
);


CREATE TABLE Review(
	RESTAURANT VARCHAR(40) NOT NULL,
	USER_NAME VARCHAR(40) NOT NULL, 
	REVIEW_STARS INT NOT NULL,
	REVIEW_DATE DATE NOT NULL,
	USER_REVIEWS INT NOT NULL,
	USER_RESTAURANT_REVIEWS INT NOT NULL,
	USER_HELPFUL_VOTES INT NOT NULL,
	REVIEW_ID INT NOT NULL AUTO_INCREMENT,
	PRIMARY KEY (REVIEW_ID),
    FOREIGN KEY (RESTAURANT) REFERENCES Restaurant(RESTAURANT),
    FOREIGN KEY (USER_NAME) REFERENCES User(USER_NAME)
);



-- #5

-- Populating the tables with the content from the TripAdvisor table 

INSERT INTO User
SELECT Distinct USER_NAME
FROM TripAdvisor;

INSERT INTO Restaurant
SELECT Distinct RESTAURANT, RANK, SCORE
FROM TripAdvisor;

INSERT INTO Review (RESTAURANT, USER_NAME, REVIEW_STARS, REVIEW_DATE, USER_REVIEWS, USER_RESTAURANT_REVIEWS, USER_HELPFUL_VOTES)
SELECT Distinct RESTAURANT, USER_NAME, REVIEW_STARS, REVIEW_DATE, USER_REVIEWS, USER_RESTAURANT_REVIEWS, USER_HELPFUL_VOTES
FROM TripAdvisor;

-- #6

-- verify lossless join
CREATE TABLE TEMP AS
SELECT Restaurant.RESTAURANT, RANK, SCORE, User.USER_NAME, REVIEW_STARS, REVIEW_DATE, USER_REVIEWS, USER_RESTAURANT_REVIEWS, USER_HELPFUL_VOTES, REVIEW_ID
FROM User
INNER JOIN Review ON User.USER_NAME=Review.USER_NAME
INNER JOIN Restaurant ON Restaurant.RESTAURANT=Review.RESTAURANT;

SELECT count (1)
    FROM TEMP a
    FULL OUTER JOIN TripAdvisor b
        USING (*)
    WHERE a.USER_NAME IS NULL
        OR b.USER_NAME IS NULL;